services:
  resource-db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${RESOURCE_DB}
      POSTGRES_USER: ${RESOURCE_DB_USERNAME}
      POSTGRES_PASSWORD: ${RESOURCE_DB_PASSWORD}
    volumes:
      - ./init-scripts/resource-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${RESOURCE_DB_PORT}:${DB_DEFAULT_PORT}"

  song-db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${SONG_DB}
      POSTGRES_USER: ${SONG_DB_USERNAME} 
      POSTGRES_PASSWORD: ${SONG_DB_PASSWORD}
    volumes:
      - ./init-scripts/song-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${SONG_DB_PORT}:${DB_DEFAULT_PORT}"

  service-registry:
    build:
      context: ./service-registry
    environment:
      APPLICATION_NAME: ${SERVICE_REGISTRY_APPLICATION_NAME}
      PORT: ${SERVICE_REGISTRY_PORT}
    ports:
      - "${SERVICE_REGISTRY_PORT}:${SERVICE_REGISTRY_PORT}"

  resource-service:
    build:
      context: ./resource-service
    environment:
      APPLICATION_NAME: ${RESOURCE_SERVICE_APPLICATION_NAME}
      PORT: ${RESOURCE_SERVICE_PORT}
      SERVICE_REGISTRY_HOST: ${SERVICE_REGISTRY_APPLICATION_NAME}
      SERVICE_REGISTRY_PORT: ${SERVICE_REGISTRY_PORT}
      DB_URL: resource-db
      DB_PORT: ${DB_DEFAULT_PORT}
      DB_USERNAME: ${RESOURCE_DB_USERNAME}
      DB_PASSWORD: ${RESOURCE_DB_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_RESOURCE_BUCKET: ${AWS_S3_RESOURCE_BUCKET}
      RABBITMQ_HOST: ${MESSAGE_SERVICE_APPLICATION_NAME}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_AMQP_PORT}
      RESOURCE_PROCESSING_QUEUE: ${RESOURCE_PROCESSING_QUEUE}
    depends_on:
      - service-registry
      - message-service
      - resource-db
    ports:
      - "${RESOURCE_SERVICE_PORT}:${RESOURCE_SERVICE_PORT}"

  resource-processor:
    build:
      context: ./resource-processor
    environment:
      APPLICATION_NAME: ${RESOURCE_PROCESSOR_APPLICATION_NAME}
      PORT: ${RESOURCE_PROCESSOR_PORT}
      SERVICE_REGISTRY_HOST: ${SERVICE_REGISTRY_APPLICATION_NAME}
      SERVICE_REGISTRY_PORT: ${SERVICE_REGISTRY_PORT}
      RABBITMQ_HOST: ${MESSAGE_SERVICE_APPLICATION_NAME}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_AMQP_PORT}
      RESOURCE_PROCESSING_QUEUE: ${RESOURCE_PROCESSING_QUEUE}
      RESOURCE_SERVICE_HOST: ${RESOURCE_SERVICE_APPLICATION_NAME}
      SONG_SERVICE_HOST: ${SONG_SERVICE_APPLICATION_NAME}
    depends_on:
      - resource-service
      - song-service
      - service-registry

  song-service:
    build:
      context: ./song-service
    environment:
      APPLICATION_NAME: ${SONG_SERVICE_APPLICATION_NAME}
      PORT: ${SONG_SERVICE_PORT}
      SERVICE_REGISTRY_HOST: ${SERVICE_REGISTRY_APPLICATION_NAME}
      SERVICE_REGISTRY_PORT: ${SERVICE_REGISTRY_PORT}
      DB_URL: song-db
      DB_PORT: ${DB_DEFAULT_PORT}
      DB_USERNAME: ${SONG_DB_USERNAME}
      DB_PASSWORD: ${SONG_DB_PASSWORD}
    deploy:
      replicas: 2
    depends_on:
      - service-registry
      - song-db
    ports:
      - "${SONG_SERVICE_OUT_PORT_RANGE}:${SONG_SERVICE_PORT}"

  message-service:
    image: rabbitmq:4.0.7-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}"
      - "${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}"
volumes:
  postgres-volume: